[
{
"source_file": "Benchmark Questions Verification V2.ipynb",
"task_id": 2,
"prompt": "Write a function to find the shared elements from the given two lists.",
"code": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ",
"test_imports": [],
"test_list": [
"assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
"assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))",
"assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"
]
},
{
"source_file": "Benchmark Questions Verification V2.ipynb",
"task_id": 3,
"prompt": "Write a python function to identify non-prime numbers.",
"code": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result",
"test_imports": [],
"test_list": [
"assert is_not_prime(2) == False",
"assert is_not_prime(10) == True",
"assert is_not_prime(35) == True",
"assert is_not_prime(37) == False"
]
},
{
"source_file": "Benchmark Questions Verification V2.ipynb",
"task_id": 4,
"prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
"code": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums",
"test_imports": [],
"test_list": [
"assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
"assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]",
"assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
]
},
{
"source_file": "Benchmark Questions Verification V2.ipynb",
"task_id": 6,
"prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.",
"code": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)",
"test_imports": [],
"test_list": [
"assert differ_At_One_Bit_Pos(13,9) == True",
"assert differ_At_One_Bit_Pos(15,8) == False",
"assert differ_At_One_Bit_Pos(2,4) == False",
"assert differ_At_One_Bit_Pos(2, 3) == True",
"assert differ_At_One_Bit_Pos(5, 1) == True",
"assert differ_At_One_Bit_Pos(1, 5) == True"
]
}
]